/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static class BitResult {
        private byte place = '0';
        private byte carry = '0';

        public BitResult(byte place, byte carry) {

            this.place = place;
            this.carry = carry;
        }

        public byte getCarry() {
            return carry;
        }

        public byte getPlace() {
            return place;
        }

        @Override
        // generated
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            BitResult bitResult = (BitResult) o;

            if (place != bitResult.place) return false;
            return carry == bitResult.carry;
        }

        @Override
        public int hashCode() {
            int result = (int) place;
            result = 31 * result + (int) carry;
            return result;
        }

        @Override
        // generated
        public String toString() {
            return "BitResult{" +
                    "place=" + place +
                    ", carry=" + carry +
                    '}';
        }
    }


    public static void main(String[] args) {
        App app = new App();
        System.out.println(app.binarySum("11", "11"));
    }

    // same size
    public String binarySum(String addend1, String addend2) {
        int longestNumber = Math.max(addend1.length(), addend2.length());
        byte[] result = new byte[longestNumber + 1];
        for (int i = 0; i < result.length; i++) {
            result[i] = '0';
        }

        // A bit of a hack, but quick to implement and simple
        String normalized1 = normalizeArraySize(addend1, longestNumber);
        String normalized2 = normalizeArraySize(addend2, longestNumber);
        byte[] leftBytes = normalized1.getBytes();
        byte[] rightBytes = normalized2.getBytes();
        byte carry = '0';
        for (int i = leftBytes.length - 1; i >= 0; i--) {
            BitResult bitResult = sumPlace(leftBytes[i], rightBytes[i], carry);
            byte place = bitResult.getPlace();

            result[i + 1] = place;
            carry = bitResult.getCarry();
        }
        result[0] = carry;

        String rawResult = new String(result);
        if(rawResult.startsWith("0")){
            rawResult = rawResult.substring(1);
        }
        return rawResult;
    }

    private String normalizeArraySize(String inString, int longestNumber) {
       String result = inString;
        if(inString.length() < longestNumber){
            StringBuilder b = new StringBuilder(longestNumber);
            b.append(inString);
            for(int i = 0; i < longestNumber - inString.length() ; i++){
                b.insert(i,'0');

            }
            result = b.toString();
        }
        return result;
    }

    BitResult sumPlace(byte a1, byte a2, byte carry) {
        int numOnes = 0;
        if (a1 == '1') numOnes++;
        if (a2 == '1') numOnes++;
        if (carry == '1') numOnes++;

        byte place = numOnes == 0 || numOnes == 2 ? (byte) '0' : (byte) '1';
        byte carryOut = numOnes < 2 ? (byte) '0' : (byte) '1';
        return new BitResult(place, carryOut);
    }
}
